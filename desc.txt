### Пояснение параметров

1. **`version`**: Определяет версию конфигурационного файла Vercel. Текущая версия — 2.
2. **`builds`**: Определяет сборочные шаги. В данном примере используется сборщик `@vercel/node` для файла `src/index.js`.
3. **`routes`**: Определяет маршрутизацию:
   - Запросы, начинающиеся с `/api/`, будут перенаправлены на `/api/index.js`.
   - Все остальные запросы будут перенаправлены на `index.html`.
4. **`env`**: Определяет переменные окружения. Эти переменные будут доступны вашему приложению.
5. **`redirects`**: Определяет правила редиректа:
   - Запросы к `/old-path` будут перенаправлены на `/new-path` с кодом статуса 301.
6. **`rewrites`**: Определяет правила переписывания URL:
   - Запросы к `/about` будут переписаны на `/about.html`.
7. **`headers`**: Определяет заголовки HTTP для вашего приложения:
   - Все запросы будут содержать заголовки `X-Content-Type-Options` и `X-Frame-Options`.

### Как создать и использовать `vercel.json`

1. **Создание файла**:
   - В корне вашего проекта создайте файл с именем `vercel.json`.
   
2. **Редактирование файла**:
   - Вставьте нужную конфигурацию в файл `vercel.json`. Вы можете начать с приведённого выше примера и адаптировать его под свои нужды.

3. **Деплой на Vercel**:
   - Убедитесь, что ваш проект подключен к Vercel. Вы можете использовать команду `vercel` в терминале для деплоя проекта.
   - При деплое Vercel автоматически прочитает и применит настройки из файла `vercel.json`.

### Пример использования переменных окружения

Если у вас есть файл `.env` для локальной разработки, вы можете использовать библиотеку `dotenv` для загрузки этих переменных в ваше приложение. Вот пример, как это можно сделать:

1. Установите библиотеку `dotenv`:

```bash
npm install dotenv